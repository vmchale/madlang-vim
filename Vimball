" Vimball Archiver by Charles E. Campbell, Jr., Ph.D.
UseVimball
finish
doc/madlang.txt	[[[1
50
*madlang* madlang environment in vim
                        ____
   ____ ___  ____ _____/ / /___ _____  ____ _
  / __ `__ \/ __ `/ __  / / __ `/ __ \/ __ `/
 / / / / / / /_/ / /_/ / / /_/ / / / / /_/ /
/_/ /_/ /_/\__,_/\__,_/_/\__,_/_/ /_/\__, /
                                    /____/

====================================================================
CONTENTS                                            *MadlangContents*

    1. Usage ......................................... |MadlangUsage|
    2. Config ....................................... |MadlangConfig|
    3. License ..................................... |MadlangLicense|

====================================================================
Section 1: Usage                                      *MadlangUsage*

By default, madlang-vim provides a command and a keybinding, viz.

:Madlang                                                  *:Madlang*
    Run madlang on current file and output to a scratch buffer, 
    e.g. >
        :Madlang
<

:MadlangCheck                                        *:MadlangCheck*
    Run linter, checking for syntax errors via syntastic. Will only be 
    defined if syntastic is present.

<F5>...Run madlang.......................................|MadlangKb|

=====================================================================
Section 2: Config                                     *MadlangConfig*

----------------------------------------------------------------------
                                                 *'g:madlang_options'*
Values: Any options to pass to madlang interpreter
Default: ''

This excludes any particular filepaths, in addition to anything in
your gitignore. Files to exclude should be separated commas but no
spaces, e.g.  >
    let g:madlang_options='--debug'
<

======================================================================
Section 3: License                                    *MadlangLicense*

This plugin is licensed under the BDS3 license. 
ftplugin/madlang.vim	[[[1
118
if exists("b:madlang_ftplugin")
	finish
endif
let b:madlang_ftplugin = 1

setlocal commentstring={#\ %s\ #}

set makeprg=madlang\ --input\ %

if !exists("g:madlang_options")
    let g:madlang_options = ''
endif
if !exists("g:syntastic_madlang_checkers")
    let g:syntastic_madlang_checkers = ['mad']
endif
let g:madlang_buf_name = 'Madlang'

if !exists("g:madlang_buf_size")
    let g:madlang_buf_size = 13
endif

" indentation behavior
set smarttab
au BufNewFile,BufRead *.mad
    \ set shiftwidth=4

" Mark a buffer as scratch
function! s:ScratchMarkBuffer()
    setlocal buftype=nofile
    " make sure buffer is deleted when view is closed
    setlocal bufhidden=wipe
    setlocal noswapfile
    setlocal buflisted
    setlocal nonumber
    setlocal statusline=%F
    setlocal nofoldenable
    setlocal foldcolumn=0
    setlocal wrap
    setlocal linebreak
    setlocal nolist
endfunction

" Return the number of visual lines in the buffer
fun! s:CountVisualLines()
    let initcursor = getpos(".")
    call cursor(1,1)
    let i = 0
    let previouspos = [-1,-1,-1,-1]
    " keep moving cursor down one visual line until it stops moving position
    while previouspos != getpos(".")
        let i += 1
        " store current cursor position BEFORE moving cursor
        let previouspos = getpos(".")
        normal! gj
    endwhile
    " restore cursor position
    call setpos(".", initcursor)
    return i
endfunction

" return -1 if no windows was open
"        >= 0 if cursor is now in the window
fun! s:MadlangGotoWin() "{{{
    let bufnum = bufnr( g:madlang_buf_name )
    if bufnum >= 0
        let win_num = bufwinnr( bufnum )
        " Will return negative for already deleted window
        exe win_num . "wincmd w"
        return 0
    endif
    return -1
endfunction "}}}

" Close madlang Buffer
fun! MadlangClose() "{{{
    let last_buffer = bufnr("%")
    if s:MadlangGotoWin() >= 0
        close
    endif
    let win_num = bufwinnr( last_buffer )
    " Will return negative for already deleted window
    exe win_num . "wincmd w"
endfunction "}}}

" Open a scratch buffer or reuse the previous one
fun! MadlangGet() "{{{
    let last_buffer = bufnr("%")
    let last_buffer_file = bufname("%")

    if s:MadlangGotoWin() < 0
        new
        exe 'file ' . g:madlang_buf_name
        setl modifiable
    else
        setl modifiable
        normal ggVGd
    endif

    call s:ScratchMarkBuffer()

    execute '.!madlang run ' . last_buffer_file . g:madlang_options
    setl nomodifiable
    
    let size = s:CountVisualLines()

    if size > g:madlang_buf_size
        let size = g:madlang_buf_size
    endif

    execute 'resize ' . size

    nnoremap <silent> <buffer> q <esc>:close<cr>
    nnoremap <buffer> <F5> <esc>:close \| :Madlang<cr>

endfunction "}}}

command! Madlang call MadlangGet()
nnoremap <F5> <ESC>:Madlang<CR>
ftdetect/madlang.vim	[[[1
1
autocmd BufNewFile,BufRead *.mad set filetype=madlang
syntax/madlang.vim	[[[1
33
" Language:   Madlibs
" Maintainer: Vanessa McHale <tmchale@wisc.edu>
" URL:        https://github.com/vmchale/madlang-vim
" LICENSE:    BSD3

if exists("b:current_syntax")
  finish
endif

" Literal strings
syn region madString oneline start=+"+ end=+"+
hi def link madString String

"Floats
syn match madFloat /\<[+]\=[0-9]\(_\=\d\)*\.\d\+\>/ display " TODO should include tibetan numerals? 
hi def link madFloat Float

"Function references
syn match madFuncName "[a-z]"
syn region madFuncRef start="efine " end=" " contains=madFuncName
hi def link madFuncRef Define

"Keywords
syn region madKeyword oneline start=/:/ end=/\ /
syn region madKeyword oneline start=/:/ end=/return/
hi def link madKeyword Label

"Comments
syn match madComment /#.*/ contains=@Spell
syn region madComment start=/{#/ end=/#}/
hi def link madComment Comment

let b:current_syntax = "madlang"
